<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Complete Think</title>
  
  <subtitle>Thinking, Coding, and Learning.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rickhw.github.io/"/>
  <updated>2018-02-26T04:31:32.286Z</updated>
  <id>http://rickhw.github.io/</id>
  
  <author>
    <name>Rick Hwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>API Gateway - Setup Logging</title>
    <link href="http://rickhw.github.io/2018/02/26/AWS/Study-Notes-API-Gateway-Setup-Logging/"/>
    <id>http://rickhw.github.io/2018/02/26/AWS/Study-Notes-API-Gateway-Setup-Logging/</id>
    <published>2018-02-25T18:35:00.000Z</published>
    <updated>2018-02-26T04:31:32.286Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文延續 &lt;a href=&quot;/2018/01/24/AWS/Study-Notes-Overview-API-Gateway/&quot;&gt;Overview API Gateway&lt;/a&gt; 相關筆記，整理在 &lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Amazon API Gateway&lt;/a&gt; 中， 如何使用 &lt;a href=&quot;/2017/03/02/AWS/Study-Notes-CloudWatch/&quot;&gt;CloudWatch Logs&lt;/a&gt; (以下縮寫 CWL) 找問題、Debugging，設定包含以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable CloudWatch Logs for API Gateway&lt;/li&gt;
&lt;li&gt;Enable API Logging for Stage&lt;/li&gt;
&lt;li&gt;Custom Access Logging&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://rickhw.github.io/categories/AWS/"/>
    
    
      <category term="API Gateway" scheme="http://rickhw.github.io/tags/API-Gateway/"/>
    
      <category term="CloudWatch" scheme="http://rickhw.github.io/tags/CloudWatch/"/>
    
      <category term="Serverless" scheme="http://rickhw.github.io/tags/Serverless/"/>
    
      <category term="Lambda" scheme="http://rickhw.github.io/tags/Lambda/"/>
    
      <category term="CloudWatch Logs" scheme="http://rickhw.github.io/tags/CloudWatch-Logs/"/>
    
  </entry>
  
  <entry>
    <title>File Descriptor and Open File</title>
    <link href="http://rickhw.github.io/2018/02/24/Linux/File-Descriptor_and_Open-Files/"/>
    <id>http://rickhw.github.io/2018/02/24/Linux/File-Descriptor_and_Open-Files/</id>
    <published>2018-02-23T19:08:00.000Z</published>
    <updated>2018-02-26T03:16:15.087Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;春節前一週個週末，因為一個服務系統異常，讓我又重新 review 關於 &lt;code&gt;File Descriptor&lt;/code&gt; (以下簡稱 FD) 的概念。&lt;a href=&quot;/2016/02/20/Linux/Open-File-Limit/&quot;&gt;上次整理&lt;/a&gt; 已經是兩年前的，再重新讀了相關資料，整理以下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FD 基本概念&lt;/li&gt;
&lt;li&gt;設定層級，以及各個層級的詳細設定方法和關係&lt;/li&gt;
&lt;li&gt;FD 應用場景與問題&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://rickhw.github.io/categories/Linux/"/>
    
    
      <category term="File Descriptor" scheme="http://rickhw.github.io/tags/File-Descriptor/"/>
    
  </entry>
  
  <entry>
    <title>Guide to Microservices</title>
    <link href="http://rickhw.github.io/2018/02/22/Architecture/Guide-to-Microservices/"/>
    <id>http://rickhw.github.io/2018/02/22/Architecture/Guide-to-Microservices/</id>
    <published>2018-02-22T05:30:00.000Z</published>
    <updated>2018-02-26T03:16:15.079Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Microservice Architecture&lt;/code&gt; 是新一代架構顯學，他聽起來是『高尚大』的技術，實際上呢？新技術會帶來好的優勢，同時也會帶來新問題，整理一些常問的問題如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Microservice&lt;/code&gt; 是有多 &lt;code&gt;Micro&lt;/code&gt;？怎樣定義一個 &lt;code&gt;Service&lt;/code&gt;？&lt;/li&gt;
&lt;li&gt;如何把既有的架構導入？可能會面臨什麼問題？&lt;/li&gt;
&lt;li&gt;他需要搭配什麼樣的基礎架構？&lt;/li&gt;
&lt;li&gt;跟 &lt;code&gt;Serverless&lt;/code&gt; 有什麼不一樣？他是 &lt;code&gt;FaaS&lt;/code&gt;？&lt;/li&gt;
&lt;li&gt;有哪一些用法 (Patterns)？&lt;/li&gt;
&lt;li&gt;當 &lt;code&gt;Service&lt;/code&gt; 很多的時候，要怎麼管理？會面對哪一些挑戰？&lt;/li&gt;
&lt;li&gt;組織如何因應這樣的變革？&lt;/li&gt;
&lt;li&gt;原本的開發測試流程將如何調整？&lt;/li&gt;
&lt;li&gt;有哪一些企業已經使用這樣的架構？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些問題應該是常會被問的，也是我正在探索學習的。&lt;/p&gt;
&lt;p&gt;整理一些我研讀中的資料與書籍，作為紀錄。&lt;/p&gt;
    
    </summary>
    
      <category term="Architecture" scheme="http://rickhw.github.io/categories/Architecture/"/>
    
    
      <category term="Serverless" scheme="http://rickhw.github.io/tags/Serverless/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
      <category term="Distributed Systems" scheme="http://rickhw.github.io/tags/Distributed-Systems/"/>
    
      <category term="Microservice" scheme="http://rickhw.github.io/tags/Microservice/"/>
    
      <category term="Service Mesh" scheme="http://rickhw.github.io/tags/Service-Mesh/"/>
    
      <category term="Reverse Proxy" scheme="http://rickhw.github.io/tags/Reverse-Proxy/"/>
    
      <category term="Kubernetes" scheme="http://rickhw.github.io/tags/Kubernetes/"/>
    
      <category term="CNCF" scheme="http://rickhw.github.io/tags/CNCF/"/>
    
      <category term="AWS" scheme="http://rickhw.github.io/tags/AWS/"/>
    
      <category term="FaaS" scheme="http://rickhw.github.io/tags/FaaS/"/>
    
      <category term="Containerize" scheme="http://rickhw.github.io/tags/Containerize/"/>
    
  </entry>
  
  <entry>
    <title>Inter-Region VPC Peering</title>
    <link href="http://rickhw.github.io/2018/02/21/AWS/Inter-Region-VPC-Peering/"/>
    <id>http://rickhw.github.io/2018/02/21/AWS/Inter-Region-VPC-Peering/</id>
    <published>2018-02-21T01:53:00.000Z</published>
    <updated>2018-02-26T03:16:15.076Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;來自 &lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2018/02/inter-region-vpc-peering-is-now-available-in-nine-additional-aws-regions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AWS News&lt;/a&gt; 的訊息，&lt;code&gt;Inter-Region VPC Peering&lt;/code&gt; 多了九個 Region，而且總算有亞洲了！不用再自己幹 Site to Site VPN 了！&lt;/p&gt;
&lt;p&gt;整理基本資訊、實測的數據、規劃上的考量等。&lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://rickhw.github.io/categories/AWS/"/>
    
    
      <category term="VPC" scheme="http://rickhw.github.io/tags/VPC/"/>
    
      <category term="Security Groups" scheme="http://rickhw.github.io/tags/Security-Groups/"/>
    
      <category term="VPC Peering" scheme="http://rickhw.github.io/tags/VPC-Peering/"/>
    
      <category term="Network ACLs" scheme="http://rickhw.github.io/tags/Network-ACLs/"/>
    
  </entry>
  
  <entry>
    <title>AWS SAA-001 Update (Feb, 2018)</title>
    <link href="http://rickhw.github.io/2018/02/15/AWS/AWS-Certified-SAA001-Update/"/>
    <id>http://rickhw.github.io/2018/02/15/AWS/AWS-Certified-SAA001-Update/</id>
    <published>2018-02-15T10:30:00.000Z</published>
    <updated>2018-02-15T07:52:35.111Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;AWS Certified Solutions Architect - Associate&lt;/code&gt; (以下簡稱 SAA) 更版，來自 AWS Blog 的訊息: &lt;a href=&quot;https://aws.amazon.com/blogs/architecture/new-aws-certified-solutions-architect-associate-exam-now-in-general-availability/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;New AWS Certified Solutions Architect – Associate Exam: Now in General Availability&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;正在準備考試的、或者有參考 &lt;a href=&quot;/2016/04/22/AWS/AWS-Certified-Solutions-Architect_Associate/&quot;&gt;我的筆記&lt;/a&gt; 的人，要注意此資訊。&lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://rickhw.github.io/categories/AWS/"/>
    
      <category term="AWS Certified" scheme="http://rickhw.github.io/categories/AWS/AWS-Certified/"/>
    
    
      <category term="Architecture" scheme="http://rickhw.github.io/tags/Architecture/"/>
    
      <category term="Azure" scheme="http://rickhw.github.io/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>Service Mesh</title>
    <link href="http://rickhw.github.io/2018/02/06/Architecture/Service-Mesh/"/>
    <id>http://rickhw.github.io/2018/02/06/Architecture/Service-Mesh/</id>
    <published>2018-02-06T05:30:00.000Z</published>
    <updated>2018-02-26T03:16:15.080Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近很常看到這個詞：&lt;a href=&quot;https://www.google.com/search?q=Service+Mesh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Service Mesh&lt;/a&gt;，源自於 &lt;a href=&quot;https://buoyant.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Buoyant&lt;/a&gt; - CEO Willian Morgan 在 APRIL 25, 2017 發表的文章：&lt;a href=&quot;https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What’s a service mesh? And why do I need one?&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Mesh&lt;/code&gt; 可以翻譯為：網、網狀物&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Service Mesh&lt;/code&gt; 第一次出現是 Buoyant 內部的會議，然後 2016/09/29 公開&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Architecture" scheme="http://rickhw.github.io/categories/Architecture/"/>
    
    
      <category term="API Gateway" scheme="http://rickhw.github.io/tags/API-Gateway/"/>
    
      <category term="Architecture" scheme="http://rickhw.github.io/tags/Architecture/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
      <category term="Distributed Systems" scheme="http://rickhw.github.io/tags/Distributed-Systems/"/>
    
      <category term="Microservice" scheme="http://rickhw.github.io/tags/Microservice/"/>
    
      <category term="Service Mesh" scheme="http://rickhw.github.io/tags/Service-Mesh/"/>
    
      <category term="Reverse Proxy" scheme="http://rickhw.github.io/tags/Reverse-Proxy/"/>
    
      <category term="Kubernetes" scheme="http://rickhw.github.io/tags/Kubernetes/"/>
    
      <category term="CNCF" scheme="http://rickhw.github.io/tags/CNCF/"/>
    
  </entry>
  
  <entry>
    <title>API Gateway - Custom Authorizer using Lambda</title>
    <link href="http://rickhw.github.io/2018/02/04/AWS/Study-Notes-API-Gateway-Custom-Authorizer-using-Lambda/"/>
    <id>http://rickhw.github.io/2018/02/04/AWS/Study-Notes-API-Gateway-Custom-Authorizer-using-Lambda/</id>
    <published>2018-02-04T06:35:00.000Z</published>
    <updated>2018-02-26T03:16:15.078Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;/2018/01/24/AWS/Study-Notes-Overview-API-Gateway/&quot;&gt;Overview API Gateway&lt;/a&gt; 中提到，&lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Amazon API Gateway&lt;/a&gt; 提供了客製化驗證的機制，讓我們可以個別設定驗證的方式，使用者認證 (Authentication) 可以使用 OAuth or SAML；授權 (Authorization) 可以使用 JSON Web Token (JWT) 或者 OAuth provider。&lt;/p&gt;
&lt;p&gt;本文整理如何使用 Lambda 做 Custom Authorizers 的基本用法與流程。&lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://rickhw.github.io/categories/AWS/"/>
    
    
      <category term="API Gateway" scheme="http://rickhw.github.io/tags/API-Gateway/"/>
    
      <category term="Serverless" scheme="http://rickhw.github.io/tags/Serverless/"/>
    
      <category term="Lambda" scheme="http://rickhw.github.io/tags/Lambda/"/>
    
      <category term="Cognito" scheme="http://rickhw.github.io/tags/Cognito/"/>
    
      <category term="JWT" scheme="http://rickhw.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>Compare GCP VPC Network with AWS</title>
    <link href="http://rickhw.github.io/2018/02/03/GCP/Compare-GCP-VPC-Network-with-AWS/"/>
    <id>http://rickhw.github.io/2018/02/03/GCP/Compare-GCP-VPC-Network-with-AWS/</id>
    <published>2018-02-03T11:41:58.000Z</published>
    <updated>2018-02-26T03:16:15.086Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;整理 GCP 的 Virtual Private Cloud (VPC) 的筆記，重點在 VPC Network、Shared VPC (XPN)，同時跟 AWS VPC 的設計比較。&lt;/p&gt;
    
    </summary>
    
      <category term="GCP" scheme="http://rickhw.github.io/categories/GCP/"/>
    
    
      <category term="VPC" scheme="http://rickhw.github.io/tags/VPC/"/>
    
      <category term="AWS VS GCP" scheme="http://rickhw.github.io/tags/AWS-VS-GCP/"/>
    
      <category term="Networking" scheme="http://rickhw.github.io/tags/Networking/"/>
    
  </entry>
  
  <entry>
    <title>Study Notes - Overview API Gateway</title>
    <link href="http://rickhw.github.io/2018/01/24/AWS/Study-Notes-Overview-API-Gateway/"/>
    <id>http://rickhw.github.io/2018/01/24/AWS/Study-Notes-Overview-API-Gateway/</id>
    <published>2018-01-24T06:35:00.000Z</published>
    <updated>2018-02-26T03:16:15.079Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近在研究 API Gateway 相關需求，同時也在評估 Solutions，整理一些想法。&lt;/p&gt;
&lt;p&gt;另外陸續整理 &lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Amazon API Gateway&lt;/a&gt; 的心得筆記。&lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://rickhw.github.io/categories/AWS/"/>
    
    
      <category term="API Gateway" scheme="http://rickhw.github.io/tags/API-Gateway/"/>
    
      <category term="VPC" scheme="http://rickhw.github.io/tags/VPC/"/>
    
      <category term="ELB" scheme="http://rickhw.github.io/tags/ELB/"/>
    
      <category term="CloudWatch" scheme="http://rickhw.github.io/tags/CloudWatch/"/>
    
      <category term="Architecture" scheme="http://rickhw.github.io/tags/Architecture/"/>
    
      <category term="Serverless" scheme="http://rickhw.github.io/tags/Serverless/"/>
    
      <category term="Lambda" scheme="http://rickhw.github.io/tags/Lambda/"/>
    
      <category term="CloudWatch Logs" scheme="http://rickhw.github.io/tags/CloudWatch-Logs/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
      <category term="Distributed Systems" scheme="http://rickhw.github.io/tags/Distributed-Systems/"/>
    
      <category term="Microservice" scheme="http://rickhw.github.io/tags/Microservice/"/>
    
      <category term="CloudFront" scheme="http://rickhw.github.io/tags/CloudFront/"/>
    
      <category term="Network Load Balancing" scheme="http://rickhw.github.io/tags/Network-Load-Balancing/"/>
    
      <category term="Nginx" scheme="http://rickhw.github.io/tags/Nginx/"/>
    
      <category term="Openresty" scheme="http://rickhw.github.io/tags/Openresty/"/>
    
      <category term="Cloud Endpoint" scheme="http://rickhw.github.io/tags/Cloud-Endpoint/"/>
    
      <category term="Service Mesh" scheme="http://rickhw.github.io/tags/Service-Mesh/"/>
    
  </entry>
  
  <entry>
    <title>Slack as RSS Reader</title>
    <link href="http://rickhw.github.io/2018/01/22/Misc/Slack-as-RSS-Reader/"/>
    <id>http://rickhw.github.io/2018/01/22/Misc/Slack-as-RSS-Reader/</id>
    <published>2018-01-22T11:41:58.000Z</published>
    <updated>2018-01-25T06:48:06.176Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;不自覺地把 Slack 當 RSS Reader 使用很久了。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Misc/Slack_RSS_Reader.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Misc" scheme="http://rickhw.github.io/categories/Misc/"/>
    
    
      <category term="Slack" scheme="http://rickhw.github.io/tags/Slack/"/>
    
      <category term="RSS Reader" scheme="http://rickhw.github.io/tags/RSS-Reader/"/>
    
      <category term="Telegram" scheme="http://rickhw.github.io/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>警急事件 (Emergency Response)</title>
    <link href="http://rickhw.github.io/2018/01/07/DevOps/Emergency-Response/"/>
    <id>http://rickhw.github.io/2018/01/07/DevOps/Emergency-Response/</id>
    <published>2018-01-07T04:43:00.000Z</published>
    <updated>2018-02-26T03:16:15.081Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://landing.google.com/sre/book.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SRE: Site Reliability Engineering&lt;/a&gt; 有幾個章節，討論關於警急事件的處理、管理、檢討、事件追蹤 … 這些章節討論事件處理的週期，也就是事件的前、中、後要做什麼。書中也從不同專業背景學習類似的想法，像是電影 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%96%A9%E5%88%A9%E6%A9%9F%E9%95%B7%EF%BC%9A%E5%93%88%E5%BE%B7%E9%81%9C%E5%A5%87%E8%B9%9F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;薩利機長：哈德遜奇蹟&lt;/a&gt; 就是很好的例子。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/categories/DevOps/SRE/"/>
    
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
      <category term="Ops" scheme="http://rickhw.github.io/tags/Ops/"/>
    
      <category term="Monitoring" scheme="http://rickhw.github.io/tags/Monitoring/"/>
    
  </entry>
  
  <entry>
    <title>Blog 標題緣由</title>
    <link href="http://rickhw.github.io/2017/12/29/About/Blog-Subject/"/>
    <id>http://rickhw.github.io/2017/12/29/About/Blog-Subject/</id>
    <published>2017-12-29T04:39:00.000Z</published>
    <updated>2018-01-23T04:24:12.988Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Blog 的標題命名緣由 (先不管文法, 詞性的問題):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complete: 指的是『完整性』，也可以說是視野、全局。加入主詞、受詞後，產生連結 (Connect)。源自於電影 “征服情海” 的經典台詞：”You complete me”。&lt;/li
      
    
    </summary>
    
      <category term="About" scheme="http://rickhw.github.io/categories/About/"/>
    
    
  </entry>
  
  <entry>
    <title>什麼是『監控』？ (What is monitoring )</title>
    <link href="http://rickhw.github.io/2017/12/22/DevOps/What-is-Monitoring/"/>
    <id>http://rickhw.github.io/2017/12/22/DevOps/What-is-Monitoring/</id>
    <published>2017-12-22T14:20:00.000Z</published>
    <updated>2018-02-26T03:16:15.085Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我很習慣追尋字面上意思的本質問題，『監控』一詞是我這幾年追得很緊的詞，索性就深入分析其意義。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/categories/DevOps/SRE/"/>
    
    
      <category term="CloudWatch" scheme="http://rickhw.github.io/tags/CloudWatch/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
      <category term="Automation" scheme="http://rickhw.github.io/tags/Automation/"/>
    
      <category term="Ops" scheme="http://rickhw.github.io/tags/Ops/"/>
    
      <category term="Monitoring" scheme="http://rickhw.github.io/tags/Monitoring/"/>
    
      <category term="Observability" scheme="http://rickhw.github.io/tags/Observability/"/>
    
      <category term="Dashboard" scheme="http://rickhw.github.io/tags/Dashboard/"/>
    
      <category term="Console" scheme="http://rickhw.github.io/tags/Console/"/>
    
  </entry>
  
  <entry>
    <title>看板導入 - 軟體開發與維運</title>
    <link href="http://rickhw.github.io/2017/12/21/Management/Introduce-Kanban/"/>
    <id>http://rickhw.github.io/2017/12/21/Management/Introduce-Kanban/</id>
    <published>2017-12-21T14:50:30.000Z</published>
    <updated>2018-01-03T01:41:26.342Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/&quot;&gt;Software Development Lifecycle&lt;/a&gt; 的整理中，整理了我經歷各種角色之後，把 &lt;code&gt;軟體開發流程 (SDLC)&lt;/code&gt; 做了不同面向的分析，最後抽象化了四個層次:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Plan&lt;/li&gt;
&lt;li&gt;Execution&lt;/li&gt;
&lt;li&gt;Acceptance&lt;/li&gt;
&lt;li&gt;Operation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最近我把這個結論應用到看板的規劃，這個規則最近上線開始試跑，跑的過程中，我又有新的想法，這些想法大多來自於過去音樂製作的心得與學習。&lt;/p&gt;
    
    </summary>
    
      <category term="Software Engineering" scheme="http://rickhw.github.io/categories/Software-Engineering/"/>
    
    
      <category term="DevOps" scheme="http://rickhw.github.io/tags/DevOps/"/>
    
      <category term="Automation" scheme="http://rickhw.github.io/tags/Automation/"/>
    
      <category term="SDLC" scheme="http://rickhw.github.io/tags/SDLC/"/>
    
      <category term="Kanban" scheme="http://rickhw.github.io/tags/Kanban/"/>
    
  </entry>
  
  <entry>
    <title>What is Automation?</title>
    <link href="http://rickhw.github.io/2017/12/21/DevOps/What-is-Automation/"/>
    <id>http://rickhw.github.io/2017/12/21/DevOps/What-is-Automation/</id>
    <published>2017-12-21T14:20:00.000Z</published>
    <updated>2018-02-26T03:16:15.085Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;因為 &lt;a href=&quot;http://www.books.com.tw/products/0010702990&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;系統思考&lt;/a&gt; 這本書，還有最近跟朋友分享了關於『自動化』看法之後，過程中我不斷地想到過去整裡的想法： &lt;a href=&quot;/2017/08/30/DevOps/Automation-or-Process/&quot;&gt;『自動化 XXX』的陷阱&lt;/a&gt;、&lt;a href=&quot;/2017/11/12/DevOps/Gossip-Automation/&quot;&gt;自動化帶來的問題&lt;/a&gt;，我決定把其中段落重新整理出來，也就是『什麼是自動化？』&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/categories/DevOps/SRE/"/>
    
    
      <category term="CloudWatch" scheme="http://rickhw.github.io/tags/CloudWatch/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
      <category term="Automation" scheme="http://rickhw.github.io/tags/Automation/"/>
    
      <category term="Process" scheme="http://rickhw.github.io/tags/Process/"/>
    
      <category term="Ops" scheme="http://rickhw.github.io/tags/Ops/"/>
    
  </entry>
  
  <entry>
    <title>Slogan in SRE</title>
    <link href="http://rickhw.github.io/2017/12/12/DevOps/Slogan-in-SRE/"/>
    <id>http://rickhw.github.io/2017/12/12/DevOps/Slogan-in-SRE/</id>
    <published>2017-12-12T11:41:58.000Z</published>
    <updated>2018-02-26T03:16:15.083Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://landing.google.com/sre/book.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SRE: Site Reliability Engineering&lt;/a&gt; 很多章節開頭都有一段很有深意的 &lt;code&gt;標語 (slogan)&lt;/code&gt;，這些話都很簡單，卻也讓人省思。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/categories/DevOps/SRE/"/>
    
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
  </entry>
  
  <entry>
    <title>Transfer Data from S3 to GCP Storage</title>
    <link href="http://rickhw.github.io/2017/12/10/GCP/Transfer-Data-From-S3-To-Cloud-Storage/"/>
    <id>http://rickhw.github.io/2017/12/10/GCP/Transfer-Data-From-S3-To-Cloud-Storage/</id>
    <published>2017-12-10T11:41:58.000Z</published>
    <updated>2018-01-23T04:24:13.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;整理如何快速把資料從 &lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/dev/Welcome.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AWS S3&lt;/a&gt; 傳到 &lt;a href=&quot;https://cloud.google.com/storage/docs/?hl=zh-tw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Cloud Storage&lt;/a&gt; 的步驟。&lt;/p&gt;
    
    </summary>
    
      <category term="GCP" scheme="http://rickhw.github.io/categories/GCP/"/>
    
    
      <category term="S3" scheme="http://rickhw.github.io/tags/S3/"/>
    
      <category term="AWS VS GCP" scheme="http://rickhw.github.io/tags/AWS-VS-GCP/"/>
    
      <category term="Cloud Storage" scheme="http://rickhw.github.io/tags/Cloud-Storage/"/>
    
  </entry>
  
  <entry>
    <title>從 iOS 無限黑屏事件，淺談軟體測試階段 - 回歸測試 Regression Test</title>
    <link href="http://rickhw.github.io/2017/12/03/SQA/Regression-Test-Is-Tough/"/>
    <id>http://rickhw.github.io/2017/12/03/SQA/Regression-Test-Is-Tough/</id>
    <published>2017-12-03T15:08:00.000Z</published>
    <updated>2017-12-13T04:27:38.022Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;12/02 Apple iOS 11.1.2 爆炸了，無限黑屏轉圈圈，暫解法是把時間改到 11/30 即可。Apple 隨即也 Relase 11.2 緊急 Fix 這個問題。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/SQA/RT-is-Tough/iOS_Crash_20171202.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;來源: &lt;a href=&quot;https://www.ptt.cc/bbs/iOS/M.1512146950.A.18E.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Iphone 6 plus突然黑屏轉圈圈&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很多人會疑惑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;為什麼蘋果會犯這種不可原諒的錯誤？&lt;/li&gt;
&lt;li&gt;難道 Apple 沒有 QA 了？&lt;/li&gt;
&lt;li&gt;有跑 &lt;code&gt;Regression Test (回歸測試, 以下簡稱 RT)&lt;/code&gt; 應該可以發現吧？&lt;/li&gt;
&lt;li&gt;有人覺得很容易重現，為什麼沒發現？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但我想的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;為什麼這會很容易被發現？為什麼大家會這樣覺得？&lt;/li&gt;
&lt;li&gt;為什麼跑 RT 就一定能 Release？&lt;/li&gt;
&lt;li&gt;實際上很多人不知道 RT 是什麼，還有其重要性，很多公司根本就沒這關卡，能動就上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;從這件事情，簡單分析，同時討論軟體的測試階段：&lt;code&gt;Regression Test (回歸測試)&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="軟體測試" scheme="http://rickhw.github.io/categories/%E8%BB%9F%E9%AB%94%E6%B8%AC%E8%A9%A6/"/>
    
    
      <category term="Automation" scheme="http://rickhw.github.io/tags/Automation/"/>
    
      <category term="Software Test" scheme="http://rickhw.github.io/tags/Software-Test/"/>
    
      <category term="Regression Test" scheme="http://rickhw.github.io/tags/Regression-Test/"/>
    
  </entry>
  
  <entry>
    <title>系統維運的精神</title>
    <link href="http://rickhw.github.io/2017/12/02/DevOps/Spirit-In-SysOps/"/>
    <id>http://rickhw.github.io/2017/12/02/DevOps/Spirit-In-SysOps/</id>
    <published>2017-12-02T15:04:00.000Z</published>
    <updated>2018-02-26T03:16:15.084Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;這 Slide 簡單整理我對於系統上線後，面對異常處理的態度以及心法。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/categories/DevOps/SRE/"/>
    
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
      <category term="Ops" scheme="http://rickhw.github.io/tags/Ops/"/>
    
  </entry>
  
  <entry>
    <title>一些個人的領悟</title>
    <link href="http://rickhw.github.io/2017/12/02/About/Short-Words/"/>
    <id>http://rickhw.github.io/2017/12/02/About/Short-Words/</id>
    <published>2017-12-02T02:58:00.000Z</published>
    <updated>2017-12-13T04:27:37.998Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;整理一些我自己常說的話，算是一種領悟吧，也可以說是 &lt;code&gt;練肖話&lt;/code&gt; 啦 XD&lt;/p&gt;
    
    </summary>
    
      <category term="About" scheme="http://rickhw.github.io/categories/About/"/>
    
    
  </entry>
  
</feed>
